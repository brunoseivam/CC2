{ obter, para uma relação de dados sobre vinhos, o vinho de maior venda e a lista de todos os vinhos que tenham venda abaixo da média geral do grupo }

constante maximoElementos: inteiro = 300

tipo tVinho: registro
					nome,
					nomeFabricante,
					nomeDistribuidor,
					tipoVinho: literal
					anoSafra,
					anoEnvasamento: inteiro
					preco: real
					unidades: inteiro
				fim_registro

declare 
	tListaVinhos[maximoElementos]: tVinho { arranjo de registros }

procedimento leiaVinho(var vinho: tVinho)
{ leitura de um registro de vinho }

	leia(vinho.nome, vinho.nomeFabricante, vinho.nomeDistribuidor,
	vinho.tipoVinho, vinho.anoSafra, vinho.anoEnvasamento,
	vinho.preco, vinho.unidades)

fim_procedimento

procedimento escrevaVinho(vinho: tVinho)
{ leitura de um registro de vinho }

	escreva(vinho.nome, vinho.nomeFabricante, vinho.nomeDistribuidor,
	vinho.tipoVinho, vinho.anoSafra, vinho.anoEnvasamento,
	vinho.preco, vinho.unidades)

fim_procedimento

funcao calculeVendas(vinho: tVinho): real
{ retorna o produto do preço pelo número de unidades vendidas }

	retorne vinho.unidades * vinho.preco
fim_funcao

{ parte principal do algoritmo }
algoritmo

	declare
		i, numeroItens: inteiro
	declare
		somaVendas, maiorVenda, mediaVinhos: real
	declare
		vinho: tListaVinhos

	{ leitura da relação de dados e cálculo da média e da maior venda }
	leia(numeroItens)
	somaVendas <- 0
	maiorVenda <- -1
	para i <- 0 ate numeroItens - 1 faca
		{ assume-se maior ou igual a 1 }
		leiaVinho(vinho[i])
		somaVendas <- somaVendas + calculeVendas(vinho[i])
		se calculeVendas(vinho[i]) > maiorVenda entao
			maiorVenda <- calculeVendas(vinho[i])
		fim_se
	fim_para
	mediaVendas <- somaVendas/numeroItens

	{ apresentação da melhor venda }
	para i <- 0 ate numeroItens - 1 faca
		se calculeVendas(vinho[i]) = maiorVenda entao
			escrevaVinho(vinho[i])
		fim_se
	fim_para

	{ apresentação dos vinhos abaixo da média calculada }
	para i <- 0 ate numeroItens - 1 faca
		se calculeVendas(vinho[i]) < mediaVinhos entao
			escrevaVinho(vinho[i])
		fim_se
	fim_para
fim_algoritmo
